# /usr/lib/cmake/webcface → /opt/webcface/lib/cmake/webcface
while(IS_SYMLINK "${CMAKE_CURRENT_LIST_DIR}" AND CMAKE_VERSION VERSION_GREATER_EQUAL "3.14")
  set(CMAKE_CURRENT_LIST_DIR_BEFORE "${CMAKE_CURRENT_LIST_DIR}")
  file(READ_SYMLINK "${CMAKE_CURRENT_LIST_DIR}" CMAKE_CURRENT_LIST_DIR)
  if(NOT IS_ABSOLUTE "${CMAKE_CURRENT_LIST_DIR}")
    get_filename_component(dir "${CMAKE_CURRENT_LIST_DIR_BEFORE}" DIRECTORY)
    set(CMAKE_CURRENT_LIST_DIR "${dir}/${CMAKE_CURRENT_LIST_DIR}")
  endif()
endwhile()

@PACKAGE_INIT@

message(STATUS "WebCFace @webcface_version_str@: ${PACKAGE_PREFIX_DIR}")

find_library(WEBCFACE_DEBUG_LIB @webcface_lib_debug@ PATHS "${PACKAGE_PREFIX_DIR}/@libdir@")
find_library(WEBCFACE_RELEASE_LIB @webcface_lib_release@ PATHS "${PACKAGE_PREFIX_DIR}/@libdir@")

# for Meson's get_variables()
set(webcface_INCLUDE_DIRS "${PACKAGE_PREFIX_DIR}/@includedir@")
set(WEBCFACE_INCLUDE_DIRS "${PACKAGE_PREFIX_DIR}/@includedir@")
set(webcface_LIBRARIES "${WEBCFACE_RELEASE_LIB}")
set(WEBCFACE_LIBRARIES "${WEBCFACE_RELEASE_LIB}")

# Create imported target webcface::webcface
# target_link_libraries とか使ってかんたんに書くこともできるが、
# Mesonのパーサーが認識できるようにするためにCMakeが生成するwebcface-targets.cmakeを真似てプロパティを書いている
foreach(target webcface wcf)
  add_library(webcface::${target} SHARED IMPORTED)
  set_target_properties(webcface::${target} PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${PACKAGE_PREFIX_DIR}/@includedir@"
  )
  if(WIN32 OR CYGWIN OR MSYS)
    set_target_properties(webcface::${target} PROPERTIES
      IMPORTED_IMPLIB_DEBUG "${WEBCFACE_DEBUG_LIB}"
      IMPORTED_IMPLIB_RELEASE "${WEBCFACE_RELEASE_LIB}"
      # dllはoptionalらしい
      # IMPORTED_LOCATION_DEBUG "${_IMPORT_PREFIX}/bin/webcface11d.dll"
      # IMPORTED_LOCATION_RELEASE "${_IMPORT_PREFIX}/bin/webcface11.dll"
      IMPORTED_CONFIGURATIONS "DEBUG;RELEASE"
      # WindowsでCMAKE_BUILD_TYPEがMinSizeRel,RelWithDebInfoの場合Releaseにリンクするようにする
      MAP_IMPORTED_CONFIG_MINSIZEREL Release
      MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release
    )
  elseif(APPLE)
    set_target_properties(webcface::${target} PROPERTIES
      IMPORTED_LOCATION "${WEBCFACE_RELEASE_LIB}"
      # MacではMesonがinstall_nameにprefixを絶対パスで入れるらしい (meson.build内で変更するオプション無い)
      IMPORTED_SONAME "@prefix@/@libdir@/lib@webcface_lib_release@.@webcface_abi_major@.dylib"
    )
  elseif(UNIX)
    set_target_properties(webcface::${target} PROPERTIES
      IMPORTED_LOCATION "${WEBCFACE_RELEASE_LIB}"
      IMPORTED_SONAME "lib@webcface_lib_release@.so.@webcface_abi_major@"
    )
  else()
    message(FATAL_ERROR "Unsupported system?")
  endif()
endforeach()
set_target_properties(webcface::webcface PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
)
set_target_properties(webcface::wcf PROPERTIES
  INTERFACE_COMPILE_FEATURES "c_std_99"
)

if(NOT CMAKE_VERSION VERSION_LESS 3.28)
  if(
    (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND
        NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 14) OR
    (CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND
        NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 16) OR
    (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC" AND
        NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 14.34)
  )
    message(STATUS "webcface::webcface_modules target is available.")
    add_library(webcface_modules STATIC EXCLUDE_FROM_ALL)
    add_library(webcface::webcface_modules ALIAS webcface_modules)
    target_compile_features(webcface_modules PUBLIC cxx_std_20)
    target_include_directories(webcface_modules PUBLIC "${PACKAGE_PREFIX_DIR}/@includedir@")
    target_link_libraries(webcface_modules PUBLIC webcface::webcface)
    target_sources(webcface_modules
      PUBLIC
        FILE_SET "webcface_modules"
        TYPE "CXX_MODULES"
        BASE_DIRS "${PACKAGE_PREFIX_DIR}/@includedir@/webcface/modules"
        FILES "${PACKAGE_PREFIX_DIR}/@includedir@/webcface/modules/webcface.ccm"
    )
  else()
    message(STATUS "webcface::webcface_modules target is not available, because this compiler is old.")
  endif()
else()
  message(STATUS "webcface::webcface_modules target is not available, because this cmake is old.")
endif()
