# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake Build and Release

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: git submodule update
      run: git submodule update --init --recursive
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Create Deb Package
      working-directory: ${{github.workspace}}/build
      run: cpack -G DEB
    - uses: actions/upload-artifact@v3
      with:
        name: deb-amd64
        path: ${{github.workspace}}/build/*.deb
  
  build-multiarch:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu22.04
          - arch: armv7
            distro: ubuntu22.04
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          # setup: |
          #   mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${{github.workspace}}:/workspace"

          # Pass some environment variables to the container
          # env: | # YAML, but pipe character is necessary
          #   artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y git build-essential cmake

          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd /workspace
            git config --global --add safe.directory /workspace
            git submodule update --init --recursive
            cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
            cmake --build build --config ${{env.BUILD_TYPE}}
            cd build
            cpack -G DEB
            
      - uses: actions/upload-artifact@v3
        with:
          name: deb-${{ matrix.arch }}
          path: ${{github.workspace}}/build/*.deb

  release:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-multiarch]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: deb-amd64
          path: ${{github.workspace}}/artifact
      - uses: actions/download-artifact@v3
        with:
          name: deb-aarch64
          path: ${{github.workspace}}/artifact
      - uses: actions/download-artifact@v3
        with:
          name: deb-armv7
          path: ${{github.workspace}}/artifact
      - name: Release
        uses: docker://antonyurchenko/git-release:v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ALLOW_EMPTY_CHANGELOG: true
        with:
          args: ${{github.workspace}}/artifact/*
