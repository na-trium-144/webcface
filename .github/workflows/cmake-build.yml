# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Meson Build and Release

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build-linux:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      matrix:
        arch: [amd64, arm64, armhf]
        distro: ["20.04"]
        include:
          - arch: amd64
            base: ubuntu
          - arch: arm64
            base: '--platform=linux/arm64/v8 arm64v8/ubuntu'
          - arch: armhf
            base: '--platform=linux/arm/v7 arm32v7/ubuntu'
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: none
          distro: none
          base_image: ${{matrix.base}}:${{matrix.distro}}

          # Not required, but speeds up builds
          # githubToken: ${{ github.token }}

          # Create an artifacts directory
          # setup: |
          #   mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${{github.workspace}}:/workspace"

          # Pass some environment variables to the container
          # env: | # YAML, but pipe character is necessary
          #   artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # armv7のubuntu20.04でなぜかSSL周りがエラーになり、これでなぜか直る
          env: |
            SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y ca-certificates gpg wget lsb-release
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc --no-check-certificate | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/kitware.list >/dev/null
            apt-get update -q -y
            apt-get install -q -y build-essential cmake file git python3-pip ninja-build zip pkg-config
            pip3 install meson

          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd /workspace
            meson setup build --buildtype=release --prefix=/opt/webcface -Dversion_suffix= -Ddownload_webui=disabled -Dpkgconfig.relocatable=true
            meson compile -C build || meson compile -C build
            DESTDIR=/workspace/dist meson install -C build --skip-subprojects

      - name: Create zip archive
        run: |
          cd ${{github.workspace}}/dist/opt/webcface/
          zip --symlinks -r ${{github.workspace}}/libwebcface-linux-${{matrix.arch}}.zip *
      - uses: actions/upload-artifact@v3
        with:
          name: linux-${{ matrix.arch }}
          path: ${{github.workspace}}/*.zip
      - name: Prepare deb package files
        run: |
          mkdir .debpkg
          cp -r dist/opt .debpkg/
          prefix=.debpkg/opt/webcface
          absprefix=/opt/webcface

          mkdir -p .debpkg/usr/bin
          for file in $prefix/bin/*; do
            echo $absprefix/bin/$(basename $file)
            ln -s $absprefix/bin/$(basename $file) .debpkg/usr/bin/
          done

          # v2.0.2以降include不要
          # mkdir -p .debpkg/usr/include
          # echo $absprefix/include/webcface
          # ln -s $absprefix/include/webcface .debpkg/usr/include/

          # mkdir -p .debpkg/usr/share/doc
          # echo $absprefix/share/doc/webcface
          # ln -s $absprefix/share/doc/webcface .debpkg/usr/share/doc/

          mkdir -p .debpkg/usr/lib/systemd/system
          echo $absprefix/lib/systemd/system/webcface-server.service
          ln -s $absprefix/lib/systemd/system/webcface-server.service .debpkg/usr/lib/systemd/system/

          libdir=lib/$(basename $prefix/lib/*-linux-*)
          mkdir -p .debpkg/usr/$libdir/cmake
          echo $absprefix/$libdir/cmake/webcface2
          ln -s $absprefix/$libdir/cmake/webcface2 .debpkg/usr/$libdir/cmake/
          mkdir -p .debpkg/usr/$libdir/pkgconfig
          echo $absprefix/$libdir/pkgconfig/webcface.pc
          ln -s $absprefix/$libdir/pkgconfig/webcface.pc .debpkg/usr/$libdir/pkgconfig/webcface.pc
          for file in $prefix/$libdir/*.so*; do
            echo $absprefix/$libdir/$(basename $file)
            ln -s $absprefix/$libdir/$(basename $file) .debpkg/usr/$libdir/$(basename $file)
          done
      - name: Create dist deb package
        uses: jiro4989/build-deb-action@v3
        with:
          package: webcface
          package_root: .debpkg
          maintainer: "na-trium-144 <na-trium-144@users.noreply.github.com>"
          version: ${{ github.ref }} # refs/tags/v*.*.*
          arch: ${{matrix.arch}}
          desc: 'Web-based IPC & Dashboard-like UI'
      - uses: actions/upload-artifact@v3
        with:
          name: linux-deb-${{ matrix.arch }}
          path: ${{github.workspace}}/*.deb

  build-macos:
    strategy:
      matrix:
        arch: [x86_64, arm64]
    runs-on: macos-13
    name: Build on macos-13 ${{matrix.arch}}
    steps:
    - uses: actions/checkout@v4

    - uses: ilammy/setup-nasm@v1
    - name: Install Meson
      run: pip install meson

    - name: Setup Meson
      run: >
        meson setup build
        --buildtype=release
        --prefix=/opt/webcface
        -Dversion_suffix=
        -Ddownload_webui=disabled
        -Dpkgconfig.relocatable=true
        $([[ ${{matrix.arch}} = arm64 ]] && echo --cross-file scripts/cross/macos_arm64)
    - name: Compile
      run: meson compile -C build || meson compile -C build
    - name: install
      run: DESTDIR=${{github.workspace}}/dist meson install -C build --skip-subprojects
    - name: Create zip archive
      run: |
        cd ${{github.workspace}}/dist/opt/webcface/
        zip --symlinks -r ${{github.workspace}}/libwebcface-macos-${{matrix.arch}}.zip *
    - uses: actions/upload-artifact@v3
      with:
        name: macos-${{matrix.arch}}
        path: ${{github.workspace}}/*.zip

  lipo-macos:
    runs-on: macos-13
    name: Create universal binary
    needs: [build-macos]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: macos-x86_64
          path: ${{github.workspace}}/
      - uses: actions/download-artifact@v3
        with:
          name: macos-arm64
          path: ${{github.workspace}}/
      - name: lipo
        run: |
          unzip libwebcface-macos-x86_64.zip -d x86_64
          unzip libwebcface-macos-arm64.zip -d arm64
          cp -R x86_64 universal
          for file in x86_64/bin/*; do
            rm universal/bin/$(basename $file)
            echo lipo x86_64/bin/$(basename $file) arm64/bin/$(basename $file) -create -output universal/bin/$(basename $file)
                 lipo x86_64/bin/$(basename $file) arm64/bin/$(basename $file) -create -output universal/bin/$(basename $file)
          done
          file=x86_64/lib/libwebcface.*.dylib
          rm universal/lib/$(basename $file)
          echo lipo x86_64/lib/$(basename $file) arm64/lib/$(basename $file) -create -output universal/lib/$(basename $file)
               lipo x86_64/lib/$(basename $file) arm64/lib/$(basename $file) -create -output universal/lib/$(basename $file)
      - name: Create zip archive
        run: |
          cd ${{github.workspace}}/universal
          zip --symlinks -r ${{github.workspace}}/libwebcface-macos-universal.zip *
      - uses: actions/upload-artifact@v3
        with:
          name: macos-universal
          path: ${{github.workspace}}/libwebcface-macos-universal.zip

  build-msvc:
    strategy:
      matrix:
        arch: ["x86", "x64"]
        buildtype: ["debug", "release"]
        include:
        - arch: x86
          devcmd: amd64_x86
        - arch: x64
          devcmd: amd64
        # - arch: arm64
        #   devcmd: amd64_arm64
    runs-on: windows-2019
    name: Build on Windows-2019 ${{matrix.arch}} ${{matrix.buildtype}}
    steps:
    - uses: actions/checkout@v4
    - name: Install Meson
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: install -y meson
    - name: Add meson to path
      run: echo "c:\Program Files\Meson" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{matrix.devcmd}}
    - name: Setup Meson debug
      if: matrix.buildtype == 'debug'
      run: >
        meson setup build
        --buildtype=${{matrix.buildtype}}
        "--prefix=C:\Program Files\webcface"
        -Dversion_suffix=
        -Ddownload_webui=disabled
        -Dtests=disabled
        -Dexamples=disabled
        -Dserver=disabled
        "-Dpkgconfig.relocatable=true"
        --cross-file scripts/cross/msvc_${{matrix.arch}}
    - name: Setup Meson release
      if: matrix.buildtype == 'release'
      run: >
        meson setup build
        --buildtype=${{matrix.buildtype}}
        "--prefix=C:\Program Files\webcface"
        -Dversion_suffix=
        -Ddownload_webui=disabled
        -Dtests=disabled
        "-Dpkgconfig.relocatable=true"
        --cross-file scripts/cross/msvc_${{matrix.arch}}
    - name: Compile
      run: |
        meson compile -C build
    - name: install
      env:
        DESTDIR: ${{github.workspace}}\dist
      run: meson install -C build --skip-subprojects

    - name: Create zip archive
      working-directory: '${{github.workspace}}\dist\Program Files\webcface'
      run: Compress-Archive * ${{github.workspace}}\libwebcface-windows-${{matrix.arch}}-${{matrix.buildtype}}.zip
    - uses: actions/upload-artifact@v3
      with:
        name: msvc-${{matrix.arch}}-${{matrix.buildtype}}
        path: ${{github.workspace}}/*.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, lipo-macos, build-msvc]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: linux-amd64
          path: ${{github.workspace}}/artifact
      - uses: actions/download-artifact@v3
        with:
          name: linux-deb-amd64
          path: ${{github.workspace}}/artifact
      - uses: actions/download-artifact@v3
        with:
          name: linux-arm64
          path: ${{github.workspace}}/artifact
      - uses: actions/download-artifact@v3
        with:
          name: linux-deb-arm64
          path: ${{github.workspace}}/artifact
      - uses: actions/download-artifact@v3
        with:
          name: linux-armhf
          path: ${{github.workspace}}/artifact
      - uses: actions/download-artifact@v3
        with:
          name: linux-deb-armhf
          path: ${{github.workspace}}/artifact
      - uses: actions/download-artifact@v3
        with:
          name: macos-universal
          path: ${{github.workspace}}/artifact
      - uses: actions/download-artifact@v3
        with:
          name: msvc-x86-debug
          path: ${{github.workspace}}
      - uses: actions/download-artifact@v3
        with:
          name: msvc-x86-release
          path: ${{github.workspace}}
      - uses: actions/download-artifact@v3
        with:
          name: msvc-x64-debug
          path: ${{github.workspace}}
      - uses: actions/download-artifact@v3
        with:
          name: msvc-x64-release
          path: ${{github.workspace}}
      # - uses: actions/download-artifact@v3
      #   with:
      #     name: msvc-arm64
      #     path: ${{github.workspace}}/artifact
      - name: zip debug and release
        run: |
          unzip libwebcface-windows-x86-debug.zip -d x86
          unzip -o libwebcface-windows-x86-release.zip -d x86
          unzip libwebcface-windows-x64-debug.zip -d x64
          unzip -o libwebcface-windows-x64-release.zip -d x64
          cd ${{github.workspace}}/x86
          zip -r ${{github.workspace}}/artifact/libwebcface-windows-x86.zip *
          cd ${{github.workspace}}/x64
          zip -r ${{github.workspace}}/artifact/libwebcface-windows-x64.zip *

      - name: Release
        uses: docker://antonyurchenko/git-release:v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ALLOW_EMPTY_CHANGELOG: true
        with:
          args: artifact/*
