# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake Test and Output Coverage (Linux GCC)

on:
  push:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libspdlog-dev libopencv-dev libmagick++-dev
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B build
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DWEBCFACE_TEST=on
        -DWEBCFACE_COVERAGE=on
        -DWEBCFACE_TEST_TIMEOUT=50

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      env:
        WEBCFACE_TRACE: 1
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --output-on-failure --timeout 5

    - name: Install gcovr
      run: sudo apt-get update && sudo apt-get install -y gcovr
    
    # https://stackoverflow.com/questions/59203704/how-to-create-a-badge-with-test-coverage-jacoco-on-github-actions
    - name: Get coverage
      id: coverage
      run: |
        gcovr -s -e src/example/ -e src/test/ -e external/ -e build/
        COVERAGE=$(gcovr -e src/example/ -e src/test/ -e external/ -e build/ | grep TOTAL | awk '{print $4}')
        echo "##[set-output name=lines;]${COVERAGE}"

    - uses: actions/checkout@v3
      with:
        ref: badge
        path: badge

    - name: Generate the badge SVG image
      uses: emibcn/badge-action@v2.0.2
      with:
        label: 'Test coverage'
        status: ${{ steps.coverage.outputs.lines }}
        color: 'blue'
        path: badge/coverage.svg

    - name: Commit badge
      working-directory: ${{github.workspace}}/badge
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add coverage.svg
        git commit -m "Add/Update badge" || true

    - name: Push badge commit
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: badge
        directory: badge
