name: Meson Test (Windows MSVC)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: []

jobs:
  test-windows-msvc:
    strategy:
      matrix:
        arch: ["x86", "x64", "arm64"]
        dep: ["source"]
        shared_flag: ["shared"]
        unity: ["on"]
        include:
        - arch: x86
          runner: windows-2019
          devcmd: amd64_x86
        - arch: x64
          runner: windows-2019
          devcmd: amd64
        - arch: arm64
          runner: windows-11-arm
          devcmd: amd64_arm64
        - arch: x64
          devcmd: amd64
          runner: windows-2019
          dep: static
          shared_flag: static
          unity: "on"
        - arch: x64
          devcmd: amd64
          runner: windows-2019
          dep: source
          shared_flag: shared
          unity: "off"
    runs-on: ${{matrix.runner}}
    steps:
    - uses: actions/checkout@v4
    # - run: git submodule update --init
    #   if: matrix.dep == 'submodule'

    # - name: vcpkg build
    #   if: matrix.dep == 'vcpkg'
    #   uses: johnwason/vcpkg-action@v5
    #   id: vcpkg
    #   with:
    #     pkgs: spdlog msgpack eventpp
    #     triplet: x64-windows-release
    #     token: ${{ github.token }}
    # - name: Add vcpkg Path
    #   run: echo "${{github.workspace}}\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Meson
      shell: cmd
      run: C:\ProgramData\Chocolatey\bin\choco.exe install -y meson || exit 0
    - name: Add meson to path
      run: echo "c:\Program Files\Meson" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{matrix.devcmd}}

    - name: Setup Meson
      # meson1.8のバグで、subprojectのbuildtypeも指定しないといけない
      run: >
        meson setup build
        --buildtype=debug
        -Dglib:buildtype=debug -Dlibffi:buildtype=debug -Dproxy-libintl:buildtype=debug -Dlibvips:buildtype=debug
        -Dtest_wait=1000
        -Ddefault_library=${{matrix.shared_flag}}
        --prefix=${{github.workspace}}/build/install
        -Dwrap_mode=default
        --cross-file scripts/cross/msvc_${{matrix.arch}}
        --unity=${{matrix.unity}}
    # ${{ steps.vcpkg.outputs.vcpkg-cmake-config }}

    - name: Compile
      run: |
        meson compile -C build

    - name: Test
      run: meson test -C build --print-errorlog --no-stdsplit --max-lines=10000 --suite webcface
    - name: Benchmark
      run: meson test --benchmark -C build --verbose --suite webcface

    - name: Check Exported Symbol
      if: matrix.dep == 'source'
      run: |
        C:\msys64\usr\bin\bash.exe -c "export PATH=\"/usr/bin:$PATH\" &&      dumpbin //exports build/*webcface*.dll | grep -A 10000 RVA | grep -B 10000 Summary | grep -v webcface | grep -v wcf"
        C:\msys64\usr\bin\bash.exe -c "export PATH=\"/usr/bin:$PATH\" && [[ $(dumpbin //exports build/*webcface*.dll | grep -A 10000 RVA | grep -B 10000 Summary | grep -v webcface | grep -v wcf | wc -l) = 4 ]]"

    - name: install
      run: meson install -C build

    - name: Test CMake with installed package
      if: matrix.arch == 'x86'
      working-directory: ${{github.workspace}}/.github/test
      run: |
        cmake -B build -DCMAKE_PREFIX_PATH=${{github.workspace}}/build/install -DCMAKE_GENERATOR_PLATFORM=WIN32
        cmake --build build --config Debug
    - name: Test building with Meson using CMake
      if: matrix.arch == 'x86'
      working-directory: ${{github.workspace}}/.github/test
      run: |
        meson setup buildmc --buildtype=debug -Dcmake_prefix_path=${{github.workspace}}/build/install
        meson compile -Cbuildmc
