name: Meson Test (Linux Arm GCC)

on:
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches: []

jobs:
  build-linux:
    # The host should always be linux
    runs-on: ubuntu-22.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 4 arch/distro combinations
    strategy:
      matrix:
        arch: [arm64, armhf]
        distro: ["24.04"]
        include:
          # - arch: amd64
          #   base: ubuntu
          - arch: arm64
            base: '--platform=linux/arm64/v8 arm64v8/ubuntu'
          - arch: armhf
            base: '--platform=linux/arm/v7 arm32v7/ubuntu'
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: none
          distro: none
          base_image: ${{matrix.base}}:${{matrix.distro}}

          # Not required, but speeds up builds
          # githubToken: ${{ github.token }}

          # Create an artifacts directory
          # setup: |
          #   mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${{github.workspace}}:/workspace"

          # Pass some environment variables to the container
          # env: | # YAML, but pipe character is necessary
          #   artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          # armv7のubuntu20.04でなぜかSSL周りがエラーになり、これでなぜか直る
          env: |
            SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
            CC: gcc-14
            CXX: g++-14

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            apt-get update -q -y
            apt-get install -q -y ca-certificates gpg wget lsb-release
            wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc --no-check-certificate | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/kitware.list >/dev/null
            apt-get update -q -y
            apt-get install -q -y build-essential gcc-14 g++-14 cmake meson file git python3-pip ninja-build zip pkg-config

          # Produce a binary artifact and place it in the mounted volume
          run: |
            cd /workspace
            meson setup build --buildtype=release -Dwrap_mode=forcefallback --prefix=/opt/webcface -Dversion_suffix= -Ddownload_webui=disabled -Dpkgconfig.relocatable=true
            meson compile -C build || meson compile -C build
            DESTDIR=/workspace/dist meson install -C build --skip-subprojects

