# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] # windows-latest
        c_compiler: [gcc, clang] # cl
        include:
          # - os: windows-latest
          #   c_compiler: cl
          #   cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          # - os: ubuntu-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          # - os: windows-latest
          #   c_compiler: gcc
          # - os: windows-latest
          #   c_compiler: clang
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v3
    
    - name: git submodule update
      run: git submodule update --init --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      env:
        CC: ${{matrix.c_compiler}}
        CXX: ${{matrix.cpp_compiler}}
      run: >
        cmake -B ${{github.workspace}}/build
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DWEBCFACE_TEST=on
        -DWEBCFACE_EXAMPLE=on
        -DWEBCFACE_TEST_TIMEOUT=1000

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure --timeout 15


  build-msvc:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: git submodule update
      run: git submodule update --init --recursive
    - name: Configure CMake
      run: >
        cmake -B ${{github.workspace}}/build
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DWEBCFACE_TEST=on
        -DWEBCFACE_EXAMPLE=on
        -DWEBCFACE_TEST_TIMEOUT=1000
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure --timeout 15

  build-mingw:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-cmake
        msystem: MINGW64
    - uses: actions/checkout@v3
    - name: git submodule update
      run: git submodule update --init --recursive
    - name: Configure CMake
      env:
        # CC: gcc
        # CXX: g++
        CC: clang
        CXX: clang++
      run: >
        cmake -B build
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        -DWEBCFACE_TEST=on
        -DWEBCFACE_EXAMPLE=on
        -DWEBCFACE_TEST_TIMEOUT=1000
    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}}
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure --timeout 15
